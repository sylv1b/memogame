{"version":3,"sources":["components/memory/Card.js","hooks/useWindowsize.js","components/memory/Scores.js","components/memory/MemoryContainer.js","utils/shuffleArray.js","data/memoData.js","services/api.js","components/shared/TextInput/TextInput.js","components/shared/Button/Button.js","App.js","reportWebVitals.js","index.js"],"names":["Card","image","size","fliped","onClick","clickDisabled","style","width","height","cursor","className","isFlipped","src","path","alt","useWindowSize","useState","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Scores","tries","found","numOfClicks","length","React","memo","MemoryContainer","memoData","onTryAgain","onSaveGame","setNumOfClicks","tempImagesId","setTempImagesId","setFound","userWins","setUserWins","setClickDisabled","setTries","isSaveEnabled","setIsSaveEnabled","id","foundImages","push","textAlign","map","includes","index","selectedImages","setTimeout","onImageClick","shuffleArray","a","i","j","Math","floor","random","data","theme","api","axios","create","baseURL","__DEV__","timeout","headers","TextInput","title","value","placeholder","error","onChange","display","flexDirection","type","padding","borderRadius","color","fontSize","marginTop","Button","App","isLoading","setIsLoading","setMemoData","numberOfImages","reset","setReset","user","setUser","userScores","setUserScores","userName","setUserName","userNameError","setUserNameError","bestScores","setBestScores","userId","localStorage","getItem","get","getUser","then","response","getUserPastGames","_id","res","sort","b","numberOfTries","images","filteredData","filter","splice","concat","items","loadingScreen","minHeight","justifyContent","alignItems","userInput","e","target","post","userJoin","setItem","catch","err","score","moment","createdAt","format","numberOfPairs","gameData","isCurrentUser","marginBottom","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAGe,SAASA,EAAT,GAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,cAC3D,OACE,qBACED,QAASD,EAAS,KAAOC,EACzBE,MAAO,CACLC,MAAM,GAAD,OAAKL,EAAL,MACLM,OAAO,GAAD,OAAKN,EAAL,MACNO,OAAQJ,GAAiBF,EAAS,UAAY,WAEhDO,UAAU,iBAPZ,SASE,eAAC,IAAD,CAAeC,WAAYR,EAA3B,UACE,qBACES,IAAKX,EAAMY,KACXN,MAAOL,EACPM,OAAQN,EACRY,IAAI,2BAEN,qBACEF,IAAI,uBACJL,MAAOL,EACPM,OAAQN,EACRY,IAAI,yBCvBd,IAsBeC,EAtBO,WAAO,IAAD,EACUC,mBAAS,CAC3CT,MAAO,EACPC,OAAQ,IAHgB,mBACnBS,EADmB,KACPC,EADO,KAmB1B,OAdAC,qBAAU,WACR,SAASC,IACPF,EAAc,CACZX,MAAOc,OAAOC,WACdd,OAAQa,OAAOE,cAQnB,OAJAF,OAAOG,iBAAiB,SAAUJ,GAElCA,IAEO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IACIH,GCnBT,SAASS,EAAT,GAAgD,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,YAC9B,OACE,qBAAKnB,UAAU,QAAf,SACGiB,EAAK,UACCA,EADD,YACUA,EAAQ,EAAI,QAAU,MADhC,cAC2CC,EAAME,OADjD,eAEc,IAAhBD,EACA,eACA,uBAKKE,UAAMC,KAAKN,GCTpBO,EAAkB,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAAiB,EAC1BpB,mBAAS,GADiB,mBACzDa,EADyD,KAC5CQ,EAD4C,OAExBrB,mBAAS,IAFe,mBAEzDsB,EAFyD,KAE3CC,EAF2C,OAGtCvB,mBAAS,IAH6B,mBAGzDY,EAHyD,KAGlDY,EAHkD,OAIhCxB,oBAAS,GAJuB,mBAIzDyB,EAJyD,KAI/CC,EAJ+C,OAKtB1B,oBAAS,GALa,mBAKzDX,EALyD,KAK1CsC,EAL0C,OAMtC3B,mBAAS,GAN6B,mBAMzDW,EANyD,KAMlDiB,EANkD,OAOtB5B,oBAAS,GAPa,mBAOzD6B,EAPyD,KAO1CC,EAP0C,KAShE3B,qBAAU,WACJsB,GAAYI,IACdC,GAAiB,GACjBV,EAAWP,EAAc,EAAGD,EAAME,WAEnC,CAACF,EAAOiB,EAAehB,EAAaO,EAAYK,IAInD,IACMlC,EADaQ,IACMR,MAgDzB,OAhBAY,qBAAU,WACR,GAA4B,IAAxBmB,EAAaR,QACXI,EAASI,EAAa,IAAIS,KAAOb,EAASI,EAAa,IAAIS,GAAI,CACjE,IAAIC,EAAW,YAAOpB,GACtBoB,EAAYC,KAAKf,EAASI,EAAa,IAAIS,IAC3CP,EAASQ,GAIPd,EAASJ,QAAUI,EAASJ,OAAS,IAAMF,EAAME,OACrDY,GAAY,GAEZA,GAAY,KAEb,CAACJ,IAGF,sBAAKhC,MAAO,CAAE4C,UAAW,UAAzB,UACE,cAAC,EAAD,CAAQvB,MAAOA,EAAOC,MAAOA,EAAOC,YAAaA,IACjD,qBACEnB,UAAU,mBACVJ,MAAO,CAAEC,MAAOA,EAAQ,IAAM,IAAMA,GAFtC,SAIG2B,EAASiB,KAAI,SAAClD,GAAD,OACZ,cAACD,EAAD,CACEC,MAAOA,EACPC,KAAMK,EAAQ,IAAM,IAAMA,EAAQ,GAAK2B,EAASJ,OAAS,IACzD3B,OACEyB,EAAMwB,SAASnD,EAAM8C,KAAOT,EAAac,SAASnD,EAAMoD,OAG1DjD,QAAS,kBA7DE,SAAC2C,EAAIM,GACxB,IAAKhD,EAAe,CAClB,GAAIwB,EAAc,IAAM,EACtBU,EAAgB,CAACc,QACZ,CACLV,GAAiB,GACjB,IAAIW,EAAc,YAAOhB,GACzBgB,EAAeL,KAAKI,GACpBd,EAAgBe,GAChBV,EAASjB,EAAQ,GACjB4B,YAAW,WACThB,EAAgB,IAChBI,GAAiB,KAChB,KAELN,EAAeR,EAAc,IA8CR2B,CAAavD,EAAM8C,GAAI9C,EAAMoD,QAC5ChD,cAAeA,GARjB,eAMeJ,EAAM8C,GANrB,YAM2B9C,EAAMoD,aAOpCZ,GACC,wBAAQrC,QAAS,kBAhDrBiC,EAAe,GACfE,EAAgB,IAChBC,EAAS,IACTE,GAAY,GACZC,GAAiB,GACjBC,EAAS,GACTT,SACAW,GAAiB,IAyCb,oCAMOf,MAAMC,KAAKC,GCpGbwB,EAAe,SAACC,GAC3B,IAAK,IAAIC,EAAID,EAAE5B,OAAS,EAAG6B,EAAI,EAAGA,IAAK,CACrC,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADL,EAEtB,CAACD,EAAEE,GAAIF,EAAEC,IAAvBD,EAAEC,GAFkC,KAE9BD,EAAEE,GAF4B,KAIvC,OAAOF,GCLIM,G,MAAO,CAClB,CACEnD,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,OAEN,CACElC,KAAM,8BACNoD,MAAO,CAAC,iBACRlB,GAAI,S,QC7EFmB,E,OAAMC,EAAMC,OAAO,CACrBC,QAASC,QAAU,wBAA0B,uCAC7CC,QAAS,IACTC,QAAS,CAAE,kBAAmB,YCsCnBC,MAzCf,YAMI,IALAC,EAKD,EALCA,MACAC,EAID,EAJCA,MACAC,EAGD,EAHCA,YACAC,EAED,EAFCA,MACAC,EACD,EADCA,SAEA,OACI,sBACIxE,MAAO,CACHyE,QAAS,OACTC,cAAe,UAHvB,UAKI,6BAAKN,IACL,uBACIO,KAAK,OACLN,MAAOA,EACPG,SAAUA,EACVF,YAAaA,EACbtE,MAAO,CACHE,OAAQ,GACR0E,QAAS,EACTC,aAAc,KAGrBN,GACM,qBACCvE,MAAO,CACH8E,MAAO,MACPC,SAAU,QACVC,UAAW,GAJhB,SAOET,QCjCN,SAASU,EAAT,GAAqC,IAAnBb,EAAkB,EAAlBA,MAAOtE,EAAW,EAAXA,QACpC,OACI,wBACI6E,KAAK,SACL7E,QAASA,EACTE,MAAO,CAAEC,MAAO,QAHpB,SAKKmE,I,qBC4LEc,MArLf,WAAgB,IAAD,EACqBxE,oBAAS,GAD9B,mBACNyE,EADM,KACKC,EADL,OAEa1E,mBAAS,IAFtB,mBAENiD,EAFM,aAGmBjD,mBAAS,KAH5B,mBAGNkB,EAHM,KAGIyD,EAHJ,OAI+B3E,mBAAS,GAJxC,mBAIN4E,EAJM,aAKa5E,oBAAS,IALtB,mBAKN6E,EALM,KAKCC,EALD,OAMW9E,mBAAS,MANpB,mBAMN+E,EANM,KAMAC,EANA,OAOuBhF,mBAAS,MAPhC,mBAONiF,EAPM,KAOMC,EAPN,OAQmBlF,mBAAS,IAR5B,mBAQNmF,EARM,KAQIC,EARJ,OAS6BpF,mBAAS,IATtC,mBASNqF,EATM,KASSC,EATT,OAUuBtF,mBAAS,IAVhC,mBAUNuF,EAVM,KAUMC,EAVN,KAYbrF,qBAAU,WACR,IAAMsF,EAASC,aAAaC,QAAQ,UAChCF,EHhBe,SAACA,GAAD,OAAYvC,EAAI0C,IAAJ,gBAAiBH,IGiB9CI,CAAQJ,GAAQK,MAAK,SAACC,GACpBf,EAAQe,EAAS/C,SAGnB0B,GAAa,KAEd,IAEH,IAAMsB,EAAmB,WH/BC,IAACP,KGgCZV,EAAKkB,IHhCkB/C,EAAI0C,IAAJ,qBAAsBH,KGgCnCK,MAAK,SAAAI,GAC1BhB,EAAcgB,EAAIlD,KAAKmD,MAAK,SAACzD,EAAG0D,GAAJ,OAAU1D,EAAE2D,cAAgBD,EAAEC,kBAC1D3B,GAAa,MHxBkBxB,EAAI0C,IAAI,sBG0BvBE,MAAK,SAAAC,GAAQ,OAAIP,EAAcO,EAAS/C,UAG5D7C,qBAAU,WACJ4E,GAAMiB,MAET,CAACjB,IAwBJ5E,qBAAU,WACR,GAAI0E,EAAO,CACTC,GAAS,GACT,IAAIwB,EAAM,YAAOtD,GACbuD,EAAetD,EACfqD,EAAOE,QAAO,SAACxD,GAAD,OAAUA,EAAKC,MAAMb,SAASa,MAC5CqD,EACJC,EAAe9D,EAAa8D,GAAcE,OACxC,EACA7B,GAAkB2B,EAAazF,OAC3B8D,EACA2B,EAAazF,QAEnByF,EAAe9D,EAAa8D,EAAaG,OAAOH,IAChD5B,EACE4B,EAAapE,KAAI,SAACwE,EAAOtE,GACvB,OAAO,2BACFsE,GADL,IAEEtE,MAAOA,WAKd,CAACY,EAAO4B,EAAOD,IAElB,IAIMgC,EACJ,qBACEtH,MAAO,CACLyE,QAAS,OACTxE,MAAO,OACPsH,UAAW,QACXC,eAAgB,SAChBC,WAAY,UANhB,wBAWIC,EACJ,qBAAKjF,GAAG,iBAAR,SACE,qBACEzC,MAAO,CACLyE,QAAS,OACTxE,MAAO,OACPsH,UAAW,QACXC,eAAgB,SAChBC,WAAY,UANhB,SAQE,gCACE,cAAC,EAAD,CACErD,MAAM,YACNE,YAAY,kBACZC,MAAOwB,EACPvB,SAAU,SAAAmD,GAAC,OAAI7B,EAAY6B,EAAEC,OAAOvD,UAEtC,cAACY,EAAD,CAAQb,MAAO,OAAQtE,QAhFL,WACxBsF,GAAa,GH3CO,SAACS,GAAD,OAAcjC,EAAIiE,KAAK,QAAS,CACpDpC,KAAMI,IG2CNiC,CAASjC,GACNW,MAAK,SAAAI,GACJlB,EAAQkB,EAAIlD,MACZ0C,aAAa2B,QAAQ,SAAUnB,EAAIlD,KAAKiD,QAEzCqB,OAAM,SAAAC,GACLjC,EAAiBiC,EAAIxB,SAAS/C,MAC9B0B,GAAa,gBA8EnB,OACE,qBAAK3C,GAAG,iBAAR,SACG0C,EAAYmC,EAAgB7B,EAC3B,qCACE,iDACCE,EAAWnE,QACV,mDAAsBmE,EAAW,GAAGoB,cAApC,YAEF,qDACA,sBAAK/G,MAAO,CACVyE,QAAS,OACTC,cAAe,MACf8C,eAAgB,iBAHlB,UAKE,sBAAKxH,MAAO,CAAEC,MAAO,KAArB,UACE,kDACC0F,EAAWnE,OACRmE,EAAW9C,KAAI,SAAAqF,GAAK,OACpB,gCACGC,IAAOD,EAAME,WAAWC,OAAO,YADlC,KACiDH,EAAMnB,cADvD,WAAUmB,EAAMvB,QAIhB,0DAEN,qBAAKlE,GAAG,UAAR,SACE,cAAC,EAAD,CACEb,SAAUA,EACVC,WAnEG,WACf2D,GAAS,IAmEG1D,WAtGK,SAACiF,EAAeuB,GHjDb,IAACC,KGkDZ,CACPpC,OAAQV,EAAKkB,IACb2B,gBACAvB,iBHrDgCnD,EAAIiE,KAAK,QAAT,eAAuBU,KGsDtD/B,MAAK,kBAAME,YAoGN,sBAAK1G,MAAO,CAAEC,MAAO,KAArB,UACE,8CACCgG,EAAWzE,OACRyE,EAAWpD,KAAI,SAACqF,EAAOnF,GACvB,IAAMyF,EAAgBN,EAAMvB,MAAQlB,EAAKkB,IACzC,OACE,sBAEE3G,MAAO,CACLyE,QAAS,OACTC,cAAe,MACfI,MAAOoD,EAAMvB,MAAQlB,EAAKkB,IAAM,MAAQ,KACxC8B,aAAc,GANlB,UAQG1F,EAAQ,EARX,MAQiByF,EAAiB,sCAAkBN,EAAMQ,KAR1D,KAQkER,EAAMnB,cARxE,WACOmB,EAAMvB,QAWf,yEAIRe,KCpLKiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.699c1d62.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactCardFlip from \"react-card-flip\";\n\nexport default function Card({ image, size, fliped, onClick, clickDisabled }) {\n  return (\n    <div\n      onClick={fliped ? null : onClick}\n      style={{\n        width: `${size}px`,\n        height: `${size}px`,\n        cursor: clickDisabled || fliped ? \"default\" : \"pointer\",\n      }}\n      className=\"card-container\"\n    >\n      <ReactCardFlip isFlipped={!fliped}>\n        <img\n          src={image.path}\n          width={size}\n          height={size}\n          alt=\"Thanks for picking me!\"\n        />\n        <img\n          src=\"./images/flipped.jpg\"\n          width={size}\n          height={size}\n          alt=\"Pick me please!\"\n        />\n      </ReactCardFlip>\n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\";\n\nconst useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState({\n    width: 0,\n    height: 0,\n  });\n  useEffect(() => {\n    function handleResize() {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n\n    handleResize();\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return windowSize;\n};\n\nexport default useWindowSize;\n","import React from \"react\";\n\nfunction Scores({ tries, found, numOfClicks }) {\n  return (\n    <div className=\"score\">\n      {tries\n        ? `${tries} ${tries > 1 ? \"tries\" : \"try\"} - ${found.length} pair found`\n        : numOfClicks === 0\n        ? \"Pick a card!\"\n        : \"Pick another card!\"}\n    </div>\n  );\n}\n\nexport default React.memo(Scores);\n","import React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport useWindowSize from \"../../hooks/useWindowsize\";\nimport Scores from \"./Scores\";\n\nconst MemoryContainer = ({ memoData, onTryAgain, onSaveGame }) => {\n  const [numOfClicks, setNumOfClicks] = useState(0);\n  const [tempImagesId, setTempImagesId] = useState([]);\n  const [found, setFound] = useState([]);\n  const [userWins, setUserWins] = useState(false);\n  const [clickDisabled, setClickDisabled] = useState(false);\n  const [tries, setTries] = useState(0);\n  const [isSaveEnabled, setIsSaveEnabled] = useState(true)\n\n  useEffect(() => {\n    if (userWins && isSaveEnabled) {\n      setIsSaveEnabled(false)\n      onSaveGame(numOfClicks / 2, found.length)\n    }\n  }, [found, isSaveEnabled, numOfClicks, onSaveGame, userWins])\n\n\n  //Get windows size\n  const windowSize = useWindowSize();\n  const width = windowSize.width;\n\n  const onImageClick = (id, index) => {\n    if (!clickDisabled) {\n      if (numOfClicks % 2 === 0) {\n        setTempImagesId([index]);\n      } else {\n        setClickDisabled(true);\n        let selectedImages = [...tempImagesId];\n        selectedImages.push(index);\n        setTempImagesId(selectedImages);\n        setTries(tries + 1);\n        setTimeout(() => {\n          setTempImagesId([]);\n          setClickDisabled(false);\n        }, 800);\n      }\n      setNumOfClicks(numOfClicks + 1);\n    }\n  };\n\n  const tryAgain = () => {\n    setNumOfClicks(0);\n    setTempImagesId([]);\n    setFound([]);\n    setUserWins(false);\n    setClickDisabled(false);\n    setTries(0);\n    onTryAgain();\n    setIsSaveEnabled(true)\n  };\n\n  useEffect(() => {\n    if (tempImagesId.length === 2) {\n      if (memoData[tempImagesId[0]].id === memoData[tempImagesId[1]].id) {\n        let foundImages = [...found];\n        foundImages.push(memoData[tempImagesId[0]].id);\n        setFound(foundImages);\n      }\n    }\n\n    if (!!memoData.length && memoData.length / 2 === found.length) {\n      setUserWins(true);\n    } else {\n      setUserWins(false);\n    }\n  }, [tempImagesId]);\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <Scores tries={tries} found={found} numOfClicks={numOfClicks} />\n      <div\n        className=\"memory-container\"\n        style={{ width: width > 900 ? 900 : width }}\n      >\n        {memoData.map((image) => (\n          <Card\n            image={image}\n            size={width > 900 ? 200 : width / 4 - (memoData.length + 2 * 5)}\n            fliped={\n              found.includes(image.id) || tempImagesId.includes(image.index)\n            }\n            key={`card-${image.id}-${image.index}`}\n            onClick={() => onImageClick(image.id, image.index)}\n            clickDisabled={clickDisabled}\n          />\n        ))}\n      </div>\n\n      {userWins && (\n        <button onClick={() => tryAgain()}>You won! Try again</button>\n      )}\n    </div>\n  );\n};\n\nexport default React.memo(MemoryContainer);\n","export const shuffleArray = (a) => {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n};\n","export const data = [\n  {\n    path: \"images/rollercoaster/01.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"001\",\n  },\n  {\n    path: \"images/rollercoaster/02.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"002\",\n  },\n  {\n    path: \"images/rollercoaster/03.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"003\",\n  },\n  {\n    path: \"images/rollercoaster/04.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"004\",\n  },\n  {\n    path: \"images/rollercoaster/05.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"005\",\n  },\n  {\n    path: \"images/rollercoaster/06.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"006\",\n  },\n  {\n    path: \"images/rollercoaster/07.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"007\",\n  },\n  {\n    path: \"images/rollercoaster/08.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"008\",\n  },\n  {\n    path: \"images/rollercoaster/09.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"009\",\n  },\n  {\n    path: \"images/rollercoaster/10.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"010\",\n  },\n  {\n    path: \"images/rollercoaster/11.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"011\",\n  },\n  {\n    path: \"images/rollercoaster/12.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"012\",\n  },\n  {\n    path: \"images/rollercoaster/13.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"013\",\n  },\n  {\n    path: \"images/rollercoaster/14.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"014\",\n  },\n  {\n    path: \"images/rollercoaster/15.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"015\",\n  },\n  {\n    path: \"images/rollercoaster/16.jpg\",\n    theme: [\"rollercoaster\"],\n    id: \"016\",\n  },\n];\n","import axios from 'axios'\n\nconst api = axios.create({\n    baseURL: __DEV__ ? 'http://localhost:5001' : 'https://memo-api.captain.brochard.se',\n    timeout: 1000,\n    headers: { 'X-Custom-Header': 'foobar' }\n});\n\nexport const getUserGames = (userId) => api.get(`/game/user/${userId}`)\n\nexport const userJoin = (userName) => api.post('/user', {\n    user: userName\n})\n\nexport const getUser = (userId) => api.get(`/user/${userId}`)\n\nexport const saveGame = (gameData) => api.post('/game', { ...gameData })\n\nexport const getLeatherBoard = () => api.get('/game/leatherboard')","import React from 'react'\n\nfunction TextInput({\n    title,\n    value,\n    placeholder,\n    error,\n    onChange\n}) {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column'\n            }}>\n            <h3>{title}</h3>\n            <input\n                type=\"text\"\n                value={value}\n                onChange={onChange}\n                placeholder={placeholder}\n                style={{\n                    height: 40,\n                    padding: 8,\n                    borderRadius: 8,\n                }}\n            />\n            {error\n                && <div\n                    style={{\n                        color: 'red',\n                        fontSize: '0.8em',\n                        marginTop: 4\n                    }}\n                >\n                    {error}\n                </div>\n            }\n        </div>\n    )\n}\n\n\nexport default TextInput\n","import React from 'react'\n\nexport default function Button({ title, onClick }) {\n    return (\n        <button\n            type=\"button\"\n            onClick={onClick}\n            style={{ width: '100%' }}\n        >\n            {title}\n        </button>\n    )\n}\n","import React, { useState, useEffect } from \"react\";\nimport MemoryContainers from \"./components/memory/MemoryContainer\";\nimport { shuffleArray } from \"./utils/shuffleArray\";\nimport \"./styles/styles.css\";\nimport { data } from \"./data/memoData\";\nimport {\n  getUserGames,\n  getUser,\n  userJoin,\n  saveGame,\n  getLeatherBoard\n} from './services/api'\nimport TextInput from \"./components/shared/TextInput/TextInput\";\nimport Button from \"./components/shared/Button/Button\";\nimport moment from 'moment'\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true)\n  const [theme, setTheme] = useState(\"\");\n  const [memoData, setMemoData] = useState([]);\n  const [numberOfImages, setNumberOfImages] = useState(8);\n  const [reset, setReset] = useState(true);\n  const [user, setUser] = useState(null)\n  const [userScores, setUserScores] = useState(null)\n  const [userName, setUserName] = useState('')\n  const [userNameError, setUserNameError] = useState('')\n  const [bestScores, setBestScores] = useState([])\n\n  useEffect(() => {\n    const userId = localStorage.getItem('userId')\n    if (userId) {\n      getUser(userId).then((response) => {\n        setUser(response.data)\n      })\n    } else {\n      setIsLoading(false)\n    }\n  }, [])\n\n  const getUserPastGames = () => {\n    getUserGames(user._id).then(res => {\n      setUserScores(res.data.sort((a, b) => a.numberOfTries - b.numberOfTries))\n      setIsLoading(false)\n    })\n    getLeatherBoard().then(response => setBestScores(response.data))\n  }\n\n  useEffect(() => {\n    if (user) getUserPastGames()\n    // avoid infinite loop  \n  }, [user])\n\n  const onClickPlayButton = () => {\n    setIsLoading(true)\n    userJoin(userName)\n      .then(res => {\n        setUser(res.data)\n        localStorage.setItem('userId', res.data._id)\n      })\n      .catch(err => {\n        setUserNameError(err.response.data)\n        setIsLoading(false)\n      })\n  }\n\n  const onSaveGame = (numberOfTries, numberOfPairs) => {\n    saveGame({\n      userId: user._id,\n      numberOfPairs,\n      numberOfTries\n    }).then(() => getUserPastGames())\n  }\n\n  //creates shuffled array of image pairs\n  useEffect(() => {\n    if (reset) {\n      setReset(false);\n      let images = [...data];\n      let filteredData = theme\n        ? images.filter((data) => data.theme.includes(theme))\n        : images;\n      filteredData = shuffleArray(filteredData).splice(\n        0,\n        numberOfImages <= filteredData.length\n          ? numberOfImages\n          : filteredData.length\n      );\n      filteredData = shuffleArray(filteredData.concat(filteredData));\n      setMemoData(\n        filteredData.map((items, index) => {\n          return {\n            ...items,\n            index: index,\n          };\n        })\n      );\n    }\n  }, [theme, reset, numberOfImages]);\n\n  const tryAgain = () => {\n    setReset(true);\n  };\n\n  const loadingScreen = (\n    <div\n      style={{\n        display: 'flex',\n        width: '100%',\n        minHeight: '100vh',\n        justifyContent: 'center',\n        alignItems: 'center'\n      }}>\n      Loading...\n    </div >)\n\n  const userInput = (\n    <div id=\"main-container\">\n      <div\n        style={{\n          display: 'flex',\n          width: '100%',\n          minHeight: '100vh',\n          justifyContent: 'center',\n          alignItems: 'center'\n        }}>\n        <div>\n          <TextInput\n            title='Your name'\n            placeholder='Enter your name'\n            error={userNameError}\n            onChange={e => setUserName(e.target.value)}\n          />\n          <Button title={'Play'} onClick={onClickPlayButton} />\n        </div>\n      </div>\n    </div>\n  )\n\n\n  return (\n    <div id=\"main-container\">\n      {isLoading ? loadingScreen : user ? (\n        <>\n          <h1>The memory game</h1>\n          {userScores.length && (\n            <h3>Your best score: {userScores[0].numberOfTries} tries</h3>\n          )}\n          <h5>Find pairs of cards</h5>\n          <div style={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between'\n          }}>\n            <div style={{ width: 200 }}>\n              <h3>Your best scores</h3>\n              {userScores.length\n                ? userScores.map(score => (\n                  <div key={score._id}>\n                    {moment(score.createdAt).format('YY-MM-DD')}: {score.numberOfTries} tries\n                  </div>\n                ))\n                : <div>Play your first game</div>}\n            </div>\n            <div id=\"content\">\n              <MemoryContainers\n                memoData={memoData}\n                onTryAgain={tryAgain}\n                onSaveGame={onSaveGame}\n              />\n            </div>\n            <div style={{ width: 200 }}>\n              <h3>LeatherBoard</h3>\n              {bestScores.length\n                ? bestScores.map((score, index) => {\n                  const isCurrentUser = score._id === user._id\n                  return (\n                    <div\n                      key={score._id}\n                      style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        color: score._id === user._id ? 'red' : null,\n                        marginBottom: 8\n                      }}>\n                      {index + 1} - {isCurrentUser ? (<div>You</div>) : score.name}: {score.numberOfTries} tries\n                    </div>\n                  )\n                })\n                : <div>No one has playd the game yet</div>}\n            </div>\n          </div>\n        </>\n      ) : userInput}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n//import './index.css';\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}